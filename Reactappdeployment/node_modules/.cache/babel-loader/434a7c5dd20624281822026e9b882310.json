{"ast":null,"code":"import _slicedToArray from\"/home/ubuntu/whats-my-ip/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from\"react\";import classes from\"./IpAddress.module.css\";import LocationMap from\"./LocationMap\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var IpAddress=function IpAddress(){var _useState=useState({}),_useState2=_slicedToArray(_useState,2),ipAddressDict=_useState2[0],setIpAddressDict=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),httpError=_useState4[0],setHttpError=_useState4[1];useEffect(function(){fetch(\"http://ip-api.com/json/\").then(function(res){if(res.ok){setHttpError(null);return res.json();}else{throw Error(\"Failed to fetch IP Address\");}}).then(function(data){console.log(data);setIpAddressDict(data);}).catch(function(error){return setHttpError(\"Failed to retrieve IP Address, please try again later\");});},[]);return/*#__PURE__*/_jsxs(\"div\",{children:[!httpError&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:classes.info,children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"span\",{className:classes.bold,children:\"Public IPv4 Address: \"}),ipAddressDict.query]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"span\",{className:classes.bold,children:\"Internet Service Provider: \"}),ipAddressDict.isp]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"span\",{className:classes.bold,children:\"Location: \"}),ipAddressDict.city,\", \",ipAddressDict.country]})]}),/*#__PURE__*/_jsx(LocationMap,{lat:ipAddressDict.lat,lon:ipAddressDict.lon})]}),httpError&&/*#__PURE__*/_jsx(\"p\",{children:httpError})]});};export default IpAddress;","map":{"version":3,"sources":["/home/ubuntu/whats-my-ip/src/Components/IpAddress.js"],"names":["useEffect","useState","classes","LocationMap","IpAddress","ipAddressDict","setIpAddressDict","httpError","setHttpError","fetch","then","res","ok","json","Error","data","console","log","catch","error","info","bold","query","isp","city","country","lat","lon"],"mappings":"+IAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CAEA,MAAOC,CAAAA,OAAP,KAAoB,wBAApB,CACA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,C,6IAEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,eACoBH,QAAQ,CAAC,EAAD,CAD5B,wCACfI,aADe,eACAC,gBADA,8BAEYL,QAAQ,CAAC,IAAD,CAFpB,yCAEfM,SAFe,eAEJC,YAFI,eAGtBR,SAAS,CAAC,UAAM,CACdS,KAAK,CAAC,yBAAD,CAAL,CACGC,IADH,CACQ,SAACC,GAAD,CAAS,CACb,GAAIA,GAAG,CAACC,EAAR,CAAY,CACVJ,YAAY,CAAC,IAAD,CAAZ,CACA,MAAOG,CAAAA,GAAG,CAACE,IAAJ,EAAP,CACD,CAHD,IAGO,CACL,KAAMC,CAAAA,KAAK,CAAC,4BAAD,CAAX,CACD,CACF,CARH,EASGJ,IATH,CASQ,SAACK,IAAD,CAAU,CACdC,OAAO,CAACC,GAAR,CAAYF,IAAZ,EACAT,gBAAgB,CAACS,IAAD,CAAhB,CACD,CAZH,EAaGG,KAbH,CAaS,SAACC,KAAD,QACLX,CAAAA,YAAY,CAAC,uDAAD,CADP,EAbT,EAgBD,CAjBQ,CAiBN,EAjBM,CAAT,CAmBA,mBACE,uBACG,CAACD,SAAD,eACC,wCACE,aAAK,SAAS,CAAEL,OAAO,CAACkB,IAAxB,wBACE,kCACE,aAAM,SAAS,CAAElB,OAAO,CAACmB,IAAzB,mCADF,CAEGhB,aAAa,CAACiB,KAFjB,GADF,cAKE,kCACE,aAAM,SAAS,CAAEpB,OAAO,CAACmB,IAAzB,yCADF,CAEGhB,aAAa,CAACkB,GAFjB,GALF,cASE,kCACE,aAAM,SAAS,CAAErB,OAAO,CAACmB,IAAzB,wBADF,CAEGhB,aAAa,CAACmB,IAFjB,MAEyBnB,aAAa,CAACoB,OAFvC,GATF,GADF,cAeE,KAAC,WAAD,EAAa,GAAG,CAAEpB,aAAa,CAACqB,GAAhC,CAAqC,GAAG,CAAErB,aAAa,CAACsB,GAAxD,EAfF,GAFJ,CAoBGpB,SAAS,eAAI,mBAAIA,SAAJ,EApBhB,GADF,CAwBD,CA9CD,CAgDA,cAAeH,CAAAA,SAAf","sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport classes from \"./IpAddress.module.css\";\nimport LocationMap from \"./LocationMap\";\n\nconst IpAddress = () => {\n  const [ipAddressDict, setIpAddressDict] = useState({});\n  const [httpError, setHttpError] = useState(null);\n  useEffect(() => {\n    fetch(\"http://ip-api.com/json/\")\n      .then((res) => {\n        if (res.ok) {\n          setHttpError(null);\n          return res.json();\n        } else {\n          throw Error(\"Failed to fetch IP Address\");\n        }\n      })\n      .then((data) => {\n        console.log(data);\n        setIpAddressDict(data);\n      })\n      .catch((error) =>\n        setHttpError(\"Failed to retrieve IP Address, please try again later\")\n      );\n  }, []);\n\n  return (\n    <div>\n      {!httpError && (\n        <>\n          <div className={classes.info}>\n            <p>\n              <span className={classes.bold}>Public IPv4 Address: </span>\n              {ipAddressDict.query}\n            </p>\n            <p>\n              <span className={classes.bold}>Internet Service Provider: </span>\n              {ipAddressDict.isp}\n            </p>\n            <p>\n              <span className={classes.bold}>Location: </span>\n              {ipAddressDict.city}, {ipAddressDict.country}\n            </p>\n          </div>\n          <LocationMap lat={ipAddressDict.lat} lon={ipAddressDict.lon} />\n        </>\n      )}\n      {httpError && <p>{httpError}</p>}\n    </div>\n  );\n};\n\nexport default IpAddress;\n"]},"metadata":{},"sourceType":"module"}